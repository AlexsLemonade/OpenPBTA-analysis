## Define the ending file(s) that we want
OUTPUT = "results/cnv_consensus.tsv",

## Define the wildcards to use in the file names. 
wildcard_constraints:
  caller = "cnvkit|freec|manta",
  dupdel = "dup|del",
  combined_caller = "manta_cnvkit|manta_freec|cnvkit_freec"

## Define the first rule of the Snakefile. This rule determines what the final file is and which steps to be taken.
rule all:
    input:
        OUTPUT


#########################      FILTER STEP FOR THE 3 CALL METHODS ####################################


rule freec_filter:
    input:
        ## Define the location of the input file and take the extension from the config file
        events="../../scratch/freec_freec/{sample}" + str(config["freec_ext"])
    output:
        ## Define the output files' names
        freec_del="../../scratch/interim/{sample}.freec.del.bed",
        freec_dup="../../scratch/interim/{sample}.freec.dup.bed"
    params:
        ## Take parameters from the config file and assign them into params for convinient use in the Shell section
        SIZE_CUTOFF=str(config["size_cutoff"]),
        FREEC_PVAL=str(config["freec_pval"]),
    shell:
        ## The awk command line is to filter out the raw file. The end result has 7 columns - | chr# | start | end | CNV_length | copy_numbers | pval | CNV type |
        ## The first awk looks at column 6 to filter out for loss/gain. Then it prints out 6 of the 7 columns above
        ## The pipe into the second awk filters the CNV length, freec pval, and add in the CNV type
        ## The last pipe is to sort first digit of chromosome number numerically
        """awk '$6~/loss/ {{print "chr"$2,$3,$4,($4-$3 + 1),$5,$9}}' {input.events} """
        """ | awk '{{if ($4 > {params.SIZE_CUTOFF} && $6 < {params.FREEC_PVAL}){{print $0,"DEL"}}}}' """
        """ | sort -k1,1 -k2,2n """
        """ | tr [:blank:] '\t' > {output.freec_del} && """
        """awk '$6~/gain/ {{print "chr"$2,$3,$4,($4-$3 + 1),$5,$9}}' {input.events} """
        """ | awk '{{if ($4 > {params.SIZE_CUTOFF} && $6 < {params.FREEC_PVAL}){{print $0,"DUP"}}}}' """
        """ | sort -k1,1 -k2,2n """
        """ | tr [:blank:] '\t' > {output.freec_dup}"""

rule cnvkit_filter:
    input:
        ## Define the location of the input file and take the extension from the config file
        events="../../scratch/cnvkit_cnvkit/{sample}" + str(config["cnvkit_ext"])
    output:
        ## Define the output files' names
        cnvkit_del="../../scratch/interim/{sample}.cnvkit.del.bed",
        cnvkit_dup="../../scratch/interim/{sample}.cnvkit.dup.bed"
    params:
        ## Take parameters from the config file and assign them into params for convinient use in the Shell section
        SIZE_CUTOFF=str(config["size_cutoff"]),
    shell:
        ## The awk command line is to filter out the raw file. The end result has 7 columns - | chr# | start | end | CNV_length | copy_numbers | pval | CNV type |
        ## The first awk looks at column 7 to filter out for loss/gain (less than 2 == loss, bigger than 2 == gain). Then it prints out 6 of the 7 columns above. Put NA for p-value since the CNVkit results don't have p-vals
        ## The pipe into the second awk filters the CNV length, and add in the CNV type
        ## The last pipe is to sort first digit of chromosome number numerically
        """awk '$7<2 {{print $2,$3,$4,($4-$3 + 1),$7,"NA"}}' {input.events} """
        """ | awk '{{if ($4 > {params.SIZE_CUTOFF}){{print $0,"DEL"}}}}' """
        """ | sort -k1,1 -k2,2n """
        """ | tr [:blank:] '\t' > {output.cnvkit_del} && """
        """awk '$7>2 {{print $2,$3,$4,($4-$3 + 1),$7,"NA"}}' {input.events} """
        """ | awk '{{if ($4 > {params.SIZE_CUTOFF}){{print $0,"DUP"}}}}' """
        """ | sort -k1,1 -k2,2n """
        """ | tr [:blank:] '\t' > {output.cnvkit_dup}"""

rule manta_filter:
    input:
        ## Define the location of the input file and take the extension from the config file
        "../../scratch/manta_manta/{sample}" + str(config["manta_ext"])
    output:
        ## Define the output files' names
        manta_del="../../scratch/interim/{sample}.manta.del.bed",
        manta_dup="../../scratch/interim/{sample}.manta.dup.bed"
    params:
        ## Take parameters from the config file and assign them into params for convinient use in the Shell section
        SIZE_CUTOFF=str(config["size_cutoff"]),
    shell:
        ## The awk command line is to filter out the raw file. The end result has 7 columns - | chr# | start | end | CNV_length | copy_numbers | pval | CNV type |
        ## The first awk looks at column 6 to filter out for loss/gain (DEL/DUP). Then it prints out 6 of the 7 columns above. Put NA for both p-value and copy number since MANTA results don't have these values.
        ## the first awk also filters out for CNV length
        ## The last pipe is to sort first digit of chromosome number numerically
        """awk '$6~/DEL/ {{if ($5 > {params.SIZE_CUTOFF}) {{print "chr"$2,$3,$4,$5,"NA","NA",$6}}}}' {input} """
        """ | sort -k1,1 -k2,2n """
        """ | tr [:blank:] '\t' > {output.manta_del} && """
        """awk '$6~/DUP/ {{if ($5 > {params.SIZE_CUTOFF}) {{print "chr"$2,$3,$4,$5,"NA","NA",$6}}}}' {input} """
        """ | sort -k1,1 -k2,2n """
        """ | tr [:blank:] '\t' > {output.manta_dup}"""


rule filter_telomeres:
    input:
        ## Define the location of the input file and take the path/extension from the config file
        bad_list=os.path.join(config["scripts"], "bad_chromosomal_seg_updated_merged.bed"),
        bedfile="../../scratch/interim/{sample}.{caller}.{dupdel}.bed"
    output:
        ## Define the output files' names
        filtered_bed="../../scratch/interim/{sample}.{caller}.{dupdel}.filtered.bed"
    threads: 1
    shell:
        ## Invoke the bedtools subtract pass in the reference and CNVs files. Direct the stdout to a new file. 
        "bedtools subtract -N -a {input.bedfile} -b {input.bad_list} -f 0.5 > {output.filtered_bed}"


rule first_merge:
    input:
        ## Define the location of the input file and take the path/extension from the config file
        filtered_bed="../../scratch/interim/{sample}.{caller}.{dupdel}.filtered.bed"
    output:
        ## Define the output files' names
        merged_bed="../../scratch/interim/{sample}.{caller}.{dupdel}.filtered2.bed"
    threads: 1
    shell:
        ## Call on bedtools to merge any overlapping segment. Merging done for any segments within a single file.
        ## Any condiders any segments within 10,000 bp to be the same CNV. 
        ## Merge but retain info from columns 2 (start pos), 3(end pos), 5(copy numbers), 7(CNV type)
        "bedtools merge -i {input.filtered_bed} -d 10000"
        " -c 2,3,5,7 -o collapse,collapse,collapse,distinct"
        " > {output.merged_bed}"


rule restructure_column:
    input:
        ## Define the location of the input file and take the path/extension from the config file
        script=os.path.join(config["scripts"], "restructure_column.py"),
        merged_bed="../../scratch/interim/{sample}.{caller}.{dupdel}.filtered2.bed"
    output:
        ## Define the output files' names
        restructured_bed="../../scratch/interim/{sample}.{caller}.{dupdel}.filtered3.bed"
    threads: 1
    shell:
        "python3 {input.script} --file {input.merged_bed} > {output.restructured_bed}"


rule compare_cnv_methods:
    input:
        ## Define the location of the input file and take the path/extension from the config file
        script=os.path.join(config["scripts"], "compare_variant_calling_updated.py"),
        cnvkit="../../scratch/interim/{sample}.cnvkit.{dupdel}.filtered3.bed",
        freec="../../scratch/interim/{sample}.freec.{dupdel}.filtered3.bed",
        manta="../../scratch/interim/{sample}.manta.{dupdel}.filtered3.bed"

    output:
        ## Define the output files' names
        manta_cnvkit="../../scratch/interim/{sample}.manta_cnvkit.{dupdel}.bed",
        manta_freec="../../scratch/interim/{sample}.manta_freec.{dupdel}.bed",
        cnvkit_freec="../../scratch/interim/{sample}.cnvkit_freec.{dupdel}.bed"
    threads: 1
    params:
        sample_name="{sample}"
    shell:
        "python3 {input.script} --manta {input.manta} --cnvkit {input.cnvkit} --freec {input.freec} "
        "--manta_cnvkit {output.manta_cnvkit} --manta_freec {output.manta_freec} --cnvkit_freec {output.cnvkit_freec} "
        "--sample {params.sample_name}"


rule combine_merge_paired_cnv:
    input:
        ## Define the location of the input file
        manta_cnvkit="../../scratch/interim/{sample}.manta_cnvkit.{dupdel}.bed",
        manta_freec="../../scratch/interim/{sample}.manta_freec.{dupdel}.bed",
        cnvkit_freec="../../scratch/interim/{sample}.cnvkit_freec.{dupdel}.bed"
    output:
        ## Define the output files' names
        merged="../../scratch/endpoints/{sample}.{dupdel}.merged.final.bed"
    threads: 1
    shell:
        ## Combine the input file, sort and output to one file
        ## Columns 4, 5, and 6 hold the original CNV calls from Manta, CNVkit, and Freec, respectively. 
        ## We want to retain info in these columns when merging these files so we use COLLAPSE to keep the information in these columns
        ## Columns 7 and 8 are the CNVtype (DEL, DUP) and Sample_name, respectively.
        ## AT THIS POINT, these columns of the input files hold the same values, thus we perform DISTINCT, which is to take the unique of columns 7 and 8.
        ## As for column 9, this column holds the files that were merged to get a specific CNV. We want to keep all information here so we COLLAPSE it.
        "cat {input.manta_cnvkit} {input.manta_freec} {input.cnvkit_freec} "
        "| sort -k1,1 -k2,2n "
        "| bedtools merge -c 4,5,6,7,8,9 -o collapse,collapse,collapse,distinct,distinct,collapse "
        "> {output.merged}"


rule merge_all:
    input:
        ## Take all of the del and dup files of ALL samples as input. If there are 200 samples, there will be 400 files total
        bedfiles = expand("../../scratch/endpoints/{sample}.{dupdel}.merged.final.bed",
                          sample = config["samples"],
                          dupdel = ["dup", "del"])
    output:
        "../../scratch/endpoints/all_CNVs_combined.tsv"
    shell:
        ## Add a header to the file and combine all of the files using cat. 
       "echo -e 'chrom\tstart\tend\tmanta_CNVs\tcnvkit_CNVs\tfreec_CNVs\tCNV_type\tBiospecimen\tfile_names' "
       " | cat - {input.bedfiles} "
       " | cut -f 1-8 "
       " > {output}"

rule clean_output:
    input:
        script=os.path.join(config["scripts"], "remove_dup_NULL_entries.py"),
        cnv_file ="../../scratch/endpoints/all_CNVs_combined.tsv"
    output:
        "results/cnv_consensus.tsv"
    shell:
        "python3 {input.script} --file {input.cnv_file} > {output}"